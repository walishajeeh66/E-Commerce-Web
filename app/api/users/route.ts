import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';
import { randomBytes } from 'crypto';

export async function GET() {
  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        role: true
      }
    });
    
    return NextResponse.json(users);
  } catch (error) {
    console.error('Users API Error:', error);
    return NextResponse.json([]);
  }
}

export async function POST(request: NextRequest) {
  try {
    let emailInput = '';
    let passwordInput = '';
    let roleInput = 'user';

    // Support JSON and multipart/form-data
    const contentType = request.headers.get('content-type') || '';
    if (contentType.includes('multipart/form-data')) {
      const form = await request.formData();
      emailInput = (form.get('email') || form.get('userEmail') || '').toString().trim().toLowerCase();
      passwordInput = (form.get('password') || form.get('userPassword') || '').toString();
      roleInput = (form.get('role') || form.get('userRole') || 'user').toString().toLowerCase();
    } else {
      const raw = await request.json().catch(() => ({} as any));
      emailInput = (raw?.email || raw?.userEmail || '').toString().trim().toLowerCase();
      passwordInput = (raw?.password || raw?.userPassword || '').toString();
      roleInput = (raw?.role || raw?.userRole || 'user').toString().toLowerCase();
    }

    // Basic validation
    const email = emailInput;
    if (!email) {
      return NextResponse.json({ error: 'Email is required' }, { status: 400 });
    }
    // Allow auto-generate password if not provided from admin panel
    const autoGeneratedPassword = !passwordInput || passwordInput.length < 6;
    if (autoGeneratedPassword) {
      // 12-char random temp password (alphanumeric)
      passwordInput = randomBytes(16).toString('base64').replace(/[^a-zA-Z0-9]/g, '').slice(0, 12);
    }
    const allowedRoles = ['user', 'admin'];
    const finalRole = allowedRoles.includes(roleInput) ? roleInput : 'user';

    // Duplicate check
    const existing = await prisma.user.findFirst({ where: { email }, select: { id: true } });
    if (existing) {
      return NextResponse.json({ error: 'User with this email already exists' }, { status: 409 });
    }

    const hashedPassword = await bcrypt.hash(passwordInput, 12);

    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        role: finalRole
      },
      select: {
        id: true,
        email: true,
        role: true
      }
    });
    // Return tempPassword only if it was auto-generated
    const responseBody: any = { ...user };
    if (autoGeneratedPassword) {
      responseBody.tempPassword = passwordInput;
    }
    return NextResponse.json(responseBody, { status: 201 });
  } catch (error) {
    console.error('Users API Error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
