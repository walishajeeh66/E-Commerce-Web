generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customer_order_product {
  id              String         @id @default(uuid())
  customerOrderId String
  productId       String
  quantity        Int
  customerOrder   customer_order @relation(fields: [customerOrderId], references: [id], onDelete: Cascade)
  product         product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([customerOrderId], map: "customer_order_product_customerOrderId_fkey")
  @@index([productId], map: "customer_order_product_productId_fkey")
}

model category {
  id      String    @id @default(uuid())
  name    String    @unique(map: "Category_name_key")
  icon    String?
  product product[]
}

model customer_order {
  id          String                   @id @default(uuid())
  name        String
  lastname    String
  phone       String
  email       String
  company     String
  adress      String
  apartment   String
  postalCode  String
  dateTime    DateTime?                @default(now())
  status      String
  total       Int
  city        String
  country     String
  orderNotice String?
  products    customer_order_product[]
}

model image {
  imageID   String @id @default(uuid())
  productID String
  image     String
}

model merchant {
  id          String    @id @default(uuid())
  name        String
  description String?
  email       String?
  phone       String?
  address     String?
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     product[]
}

model notification {
  id        String                @id
  userId    String
  title     String
  message   String                @db.Text
  type      notification_type
  isRead    Boolean               @default(false)
  priority  notification_priority @default(NORMAL)
  metadata  Json?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  user      user                  @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Notification_userId_fkey")

  @@index([createdAt], map: "Notification_createdAt_idx")
  @@index([userId], map: "Notification_userId_idx")
  @@index([userId, isRead], map: "Notification_userId_isRead_idx")
  @@index([userId, type], map: "Notification_userId_type_idx")
}

model product {
  id              String                   @id @default(uuid())
  slug            String                   @unique(map: "Product_slug_key")
  title           String
  mainImage       String
  price           Int                      @default(0)
  rating          Int                      @default(0)
  description     String                   @db.Text
  manufacturer    String
  inStock         Int                      @default(1)
  categoryId      String
  merchantId      String
  discountedPrice Int?                     @default(0)
  customerOrders  customer_order_product[]
  category        category                 @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "Product_categoryId_fkey")
  merchant        merchant                 @relation(fields: [merchantId], references: [id], map: "Product_merchantId_fkey")
  wishlist        wishlist[]

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@index([merchantId], map: "Product_merchantId_fkey")
}

model user {
  id           String         @id @default(uuid())
  email        String         @unique(map: "User_email_key")
  password     String?
  role         String?        @default("user")
  notification notification[]
  wishlist     wishlist[]
}

model wishlist {
  id        String  @id @default(uuid())
  productId String
  userId    String
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade, map: "Wishlist_productId_fkey")
  user      user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Wishlist_userId_fkey")

  @@index([productId], map: "Wishlist_productId_fkey")
  @@index([userId], map: "Wishlist_userId_fkey")
}

model hero {
  id          String   @id @default(uuid())
  image       String?
  heading     String?
  description String?  @db.Text
  buyNowUrl   String?
  learnMoreUrl String?
  productId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum notification_type {
  ORDER_UPDATE
  PAYMENT_STATUS
  PROMOTION
  SYSTEM_ALERT
}

enum notification_priority {
  LOW
  NORMAL
  HIGH
  URGENT
}
